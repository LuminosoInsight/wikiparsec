"""
A Python script that uses data from `langcodes` to generate a simple
Haskell lookup table of language names.
"""
import langcodes

table_languages = ['en', 'de']

header = """
-- This file is automatically generated using `scripts/make_language_table.py`.

module Data.LanguageNames where
import qualified Data.Map as Map
import Data.ByteString (ByteString)
import qualified Data.ByteString.UTF8 as UTF8

lookupLanguage :: ByteString -> ByteString -> ByteString
lookupLanguage lang name =
  let sname = UTF8.toString name
      slang = UTF8.toString lang
  in UTF8.fromString $
     Map.findWithDefault sname (slang, sname) languageNames

languageNames :: Map.Map (String, String) String
languageNames = Map.fromList [
""".strip()

def main():
    print(header)
    for namelang in table_languages:
        used_names = set()
        names = langcodes.DB.query("select subtag, name from language_name where language=? order by name, entry_order", namelang)
        for code, name in names:
            assert (',' not in name), name
            if name not in used_names:
                used_names.add(name)
                print('  (("%s", "%s"), "%s"),' % (namelang, name, code))
    # fake entry to finish the list
    print('  (("", ""), "und")]')


if __name__ == '__main__':
    main()
